pub const MEM_SIZE: usize = 4096;
pub const START_ADRR: usize = 0x200;
pub const NBR_OPCODE: usize = 35;
pub const CPU_SPEED: usize = 10;

pub const CHIP8_FONTSET: [u8; 80] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
];

#[allow(non_snake_case)]
pub struct CPU {
    pub mem: [u8; MEM_SIZE], // memoire
    pub V: [u8; 16],         // le registre
    pub I: u16,              // stock une adresse mémoire ou dessinateur
    pub stack: [u16; 16],    // pour gérer les sauts dans « mémoire », 16 au maximum
    pub sp: u8, // (stack pointer) stock le nombre de sauts effectués pour ne pas dépasser 16
    pub game_count: u8, // compteur pour la synchronisation
    pub sound_count: u8, // compteur pour le son
    pub pc: u16, // pour parcourir le tableau « mémoire »
    pub debug: bool,
}

pub struct Jump {
    pub mask: [u16; NBR_OPCODE],
    pub id: [u16; NBR_OPCODE],
}

pub struct Keyboard {
    pub keys: [bool; 16],
    pub awaiting_key: Option<u8>,
}
